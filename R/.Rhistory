## Set up edge list as 2-column matrix
edges <- rbind( c(1,2), c(1,5), c(2,3), c(3,4), c(3,5), c(4,5),
c(5,6), c(5,8), c(5,9), c(6,7), c(7,8), c(8,9)
)
## Density threshold
gamma <- .51
code.dir <- "C:/Users/xinmi/GCMER/R"#XM
source(file.path(code.dir, "graph.conversion.R"))
source(file.path(code.dir, "mqcpp.R"))
## Run MQCPP algorithm
res <- mqcpp(edges, gamma)
###############################
# Check MQCPP solution on
# example from Melo et al 2023
###############################
library(gurobi)
## Run MQCPP algorithm
res <- mqcpp(edges, gamma)
res
gamma
## Run MQCPP algorithm
res <- mqcpp(edges, gamma=0.6)
res
## Run MQCPP algorithm
res <- mqcpp(edges, gamma=0.4)
res
## Run MQCPP algorithm
res <- mqcpp(edges, gamma=0.5)
res
## Run MQCPP algorithm
res <- mqcpp(edges, gamma=0.51)
res
## Run MQCPP algorithm
res <- mqcpp(edges, gamma=0.506)
res
## Run MQCPP algorithm
res <- mqcpp(edges, gamma=0.52)
res
## Run MQCPP algorithm
res <- mqcpp(edges, gamma=0.51)
res
res <- mqcpp(edges, gamma=0.52)
res
res <- mqcpp(edges, gamma=0.6)
res
res <- mqcpp(edges, gamma=0.59)
res
res <- mqcpp(edges, gamma=0.58)
res
res <- mqcpp(edges, gamma=0.57)
res
res <- mqcpp(edges, gamma=0.56)
res
res <- mqcpp(edges, gamma=0.52)
res
## Run MQCPP algorithm
res <- mqcpp(edges, gamma=0.51)
res
res <- mqcpp(edges, gamma=0.52)
res
res <- mqcpp(edges, gamma=0.56)
res
