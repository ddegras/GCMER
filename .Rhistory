idx <- t(combn(2:10,2))
idx
expand.grid(10)
expand.grid(1:10)
?expand.grid
expand.grid(10, 10)
comb.list <- lapply(2:10, function(k) combn(digits, k, simplify = FALSE))
comb.list <- lapply(2:10, function(k) combn(2:10, k, simplify = FALSE))
comb.list <- lapply(2:10, function(k) combn(3:11, k, simplify = FALSE))
comb.list <- lapply(3:11, function(k) combn(2:10, k, simplify = FALSE))
comb.list <- lapply(2:10, function(k) combn(2:10, k, simplify = FALSE))
combn(2:10, 2)
combn(2:10, 3)
comb.list <- lapply(2:10, function(k) combn(2:9, k, simplify = FALSE))
comb.list <- lapply(2:9, function(k) combn(2:10, k, simplify = FALSE))
comb.list
length(comb.list)
length(comb.list[[1]])
length(comb.list[[2]])
length(comb.list[[3]])
sapply(comb.list, length)
length(comb.list[[8]])
comb.list[[8]]
do.call(c, comb.list)
sum(sapply(comb.list, length))
idx <- t(combn(2:10,2))
comb.list <- lapply(2:9, function(k) combn(2:10, k, simplify = FALSE))
comb.list <- do.call(c, comb.list)
s.mat.aff <- vector("list", length(comb.list))
for(i in 1:length(comb.list)){
idx <- comb.list[[i]]
features <- apply(sample100[,idx], 1, function(row) paste(row, collapse=" "))
s.mat.aff[[i]] <- stringsimmatrix(features, method = "lv")
}
str(s.mat.aff)
s.mat.aff[[1]]
summary.sim.mat <- lapply(s.mat.aff, summary)
summary.sim.mat[1:10]
summary.sim.mat <- sapply(s.mat.aff, function(obj) summary(as.vector(obj)))
summary.sim.mat
summary.sim.mat[[1]]
summary.sim.mat[1]
s.mat.aff[[1]]
summary.sim.mat <- sapply(s.mat.aff, function(obj) summary(upper.tri(obj, diag = FALSE)))
summary.sim.mat[1]
summary.sim.mat
class(summary.sim.mat)
summary.sim.mat <- sapply(s.mat.aff, function(obj) summary(as.vector(upper.tri(obj, diag = FALSE))))
class(summary.sim.mat)
dim(summary.sim.mat)
summary.sim.mat[1]
summary.sim.mat[1,]
summary(s.mat.aff[[1]])
summary(upper.tri(s.mat.aff[[1]], diag = FALSE))
as.vector(upper.tri(s.mat.aff[[1]]))
as.vector(s.mat.aff[[1]][upper.tri(s.mat.aff[[1]])])
str(s.mat.aff)
summary.sim.mat <- sapply(s.mat.aff, function(obj) summary(as.vector(obj[upper.tri(obj, diag = FALSE)])))
summary.sim.mat[1,]
summary.sim.mat[1]
as.vector(s.mat.aff[[1]][upper.tri(s.mat.aff[[1]])])
summary(as.vector(s.mat.aff[[1]][upper.tri(s.mat.aff[[1]])]))
summary.sim.mat <- sapply(s.mat.aff, function(obj) c(summary(as.vector(obj[upper.tri(obj, diag = FALSE)]))))
summary.sim.mat[1]
summary.sim.mat[1,]
summary.sim.mat[,1]
dim(summary.sim.mat)
summary.sim.mat <- t(summary.sim.mat)
dim(summary.sim.mat)
summary.sim.mat[,5]
# Blocking
n <- nrow(aff)
aff.words <- get.words(aff, n)
aff.words
aff[1:5]
D10K[1,]
# 10Kfull synthetic dataset
data.dir <- "D://Github//Data-Analytics-Lab-Prof.Degras//EntityResolution//DataResource//10Kfull.RData" #XC
load(data.dir)
ls() # display the data name "D10K"
n <- length(D10K) #10000
D10K[1,]
D10K[1]
library(cora)
library(stringdist)
data(cora)
n <- nrow(cora)
cora[1,]
past0(cora[1,], separate = " ")
paste0(cora[1,], separate = " ")
paste0(cora[1,], sep = " ")
?paste0
paste0(cora[1, -1])
paste0(cora[1, -1], recycle0 = FALSE)
paste0(cora[1, -1], recycle0 = TRUE)
paste(cora[1, -1], collapse = " ")
names(cora)
ncol(cora)
sim.cora <- vector("list", (ncol(cora)-1))
for(i in 1:(ncol(cora)-1)){
sim.cora[[i]] <- stringsimmatrix(cora[,(i+1)], method = "lv")
}
str(sim.cora)
is.na(cora)
sum(is.na(cora))
dim(cora)
prod(dim(cora))
# NA issue
# replace NA with empty ""
cora[is.na(cora)] <- ""
cora[1:5,]
sim.cora <- vector("list", (ncol(cora)-1))
for(i in 1:(ncol(cora)-1)){
sim.cora[[i]] <- stringsimmatrix(cora[,(i+1)], method = "lv")
}
str(sim.cora)
str(sim.cora[[1]])
sim.cora[[1]][1:10, 1:10]
cora[1:10,]
data.dir <- "C://Users//xinmi//GCMER//Affiliation//" #XC
aff <- read.csv(file.path(data.dir, "clean_affiliations_final.csv"))
aff[1:30,]
data.dir <- "C://Users//xinmi//GCMER//" #XC
sample100 <- read.csv(file.path(data.dir, "sampled100.csv"))
samplesize <- 100
start <- 978
idx <- start:(start + samplesize - 1)
sampled100
idx
sampled100 <- aff[idx,]
#write.csv(sample100, file = file.path(data.dir, "sample100.csv"))
head(sampled100, 10)
save(sampled100, file = "sampled100.csv")
getwd()
data.dir <- "C://Users//xinmi//GCMER//" #XC
sample100 <- read.csv(file.path(data.dir, "sampled100.csv"))
sample100
idx
aff[978,]
write.csv(sample100, file = file.path(data.dir, "sampled100.csv"))
head(sampled100, 10)
rm(list = ls())
data.dir <- "C://Users//xinmi//GCMER//Affiliation//" #XC
aff <- read.csv(file.path(data.dir, "clean_affiliations_final.csv"))
aff[1:30,]
data.dir <- "C://Users//xinmi//GCMER//" #XC
sample100 <- read.csv(file.path(data.dir, "sampled100.csv"))
head(sample100)
data.dir
data.dir
data.dir
rm(list = ls())
library(stringdist)
data.dir <- "C://Users//xinmi//GCMER//Affiliation//" #XC
aff <- read.csv(file.path(data.dir, "clean_affiliations_final.csv"))
aff[1:30,]
data.dir <- "C://Users//xinmi//GCMER//" #XC
sample100 <- read.csv(file.path(data.dir, "sampled100.csv"))
samplesize <- 100
start <- 978
idx <- start:(start + samplesize - 1)
idx
sampled100 <- aff[idx,]
write.csv(sampled100, file = file.path(data.dir, "sampled100.csv"))
head(sampled100, 10)
sample100 <- read.csv(file.path(data.dir, "sampled100.csv"))
head(sample100)
rm(list = ls())
library(stringdist)
data.dir <- "C://Users//xinmi//GCMER//Affiliation//" #XC
aff <- read.csv(file.path(data.dir, "clean_affiliations_final.csv"))
aff[1:30,]
data.dir <- "C://Users//xinmi//GCMER//" #XC
sampled100 <- read.csv(file.path(data.dir, "sampled100.csv"))
head(sampled100)
names(sampled100)
sampled100 <- sampled100[, -c(1,2)]
dim(sampled100)
system.time(
s.mat.sampled <- stringsimmatrix(sampled100, method = "lv")
)
sim.sampled.aff <- vector("list", (ncol(sampled100)-1))
sim.sampled.aff <- vector("list", (ncol(sampled100)))
sim.sampled.aff
sim.sampled.aff <- vector("list", (ncol(sampled100)))
for(i in 1:ncol(sampled100)){
sim.sampled.aff[[i]] <- stringsimmatrix(sampled100[, i], method = "lv")
}
ncol(sampled100)
sampled100[, i]
i
sim.sampled.aff
sampled100(is.na(sampled100))
sampled100[is.na(sampled100)] <- ""
sim.sampled.aff <- vector("list", (ncol(sampled100)))
for(i in 1:ncol(sampled100)){
sim.sampled.aff[[i]] <- stringsimmatrix(sampled100[, i], method = "lv")
}
sim.sampled.aff
# manually label the sampled 100 rows
mapping.aff <- read.csv(file.path(data.dir, "affiliationstrings_mapping.csv"))
# manually label the sampled 100 rows
data.dir <- "C://Users//xinmi//GCMER//Affiliation//" #XC
mapping.aff <- read.csv(file.path(data.dir, "affiliationstrings_mapping.csv"))
label <- integer(samplesize)
count <- 1
for(i in 1:samplesize){
if(label[i] == 0){
label[i] <- count
mp <- intersect(mapping.aff[mapping.aff[, 1] == sample100[i, 1], 2], sample100[, 1])
idx <- which(sample100[,1] %in% mp)
label[idx[idx > i]] <- count
count <- count + 1
}else{
i <- i + 1
}
}
label
samplesize <- 100
label <- integer(samplesize)
count <- 1
for(i in 1:samplesize){
if(label[i] == 0){
label[i] <- count
mp <- intersect(mapping.aff[mapping.aff[, 1] == sample100[i, 1], 2], sample100[, 1])
idx <- which(sample100[,1] %in% mp)
label[idx[idx > i]] <- count
count <- count + 1
}else{
i <- i + 1
}
}
label <- integer(samplesize)
count <- 1
for(i in 1:samplesize){
if(label[i] == 0){
label[i] <- count
mp <- intersect(mapping.aff[mapping.aff[, 1] == sampled100[i, 1], 2], sampled100[, 1])
idx <- which(sampled100[,1] %in% mp)
label[idx[idx > i]] <- count
count <- count + 1
}else{
i <- i + 1
}
}
label
rm(list = ls())
library(stringdist)
data.dir <- "C://Users//xinmi//GCMER//" #XC
sampled100 <- read.csv(file.path(data.dir, "labeled100.csv"))
sampled100 <- read.csv(file.path(data.dir, "labeled100.csv"))
head(sampled100)
label <- integer(samplesize)
count <- 1
for(i in 1:samplesize){
if(label[i] == 0){
label[i] <- count
mp <- intersect(mapping.aff[mapping.aff[, 1] == sampled100[i, 1], 2], sampled100[, 1])
idx <- which(sampled100[,1] %in% mp)
label[idx[idx > i]] <- count
count <- count + 1
}else{
i <- i + 1
}
}
samplesize <- 100
start <- 978
idx <- start:(start + samplesize - 1)
sampled100 <- aff[idx,]
head(sampled100, 10)
data.dir <- "C://Users//xinmi//GCMER//Affiliation//" #XC
aff <- read.csv(file.path(data.dir, "clean_affiliations_final.csv"))
aff[1:30,]
samplesize <- 100
start <- 978
idx <- start:(start + samplesize - 1)
sampled100 <- aff[idx,]
# manually label the sampled 100 rows
data.dir <- "C://Users//xinmi//GCMER//Affiliation//" #XC
mapping.aff <- read.csv(file.path(data.dir, "affiliationstrings_mapping.csv"))
label <- integer(samplesize)
count <- 1
for(i in 1:samplesize){
if(label[i] == 0){
label[i] <- count
mp <- intersect(mapping.aff[mapping.aff[, 1] == sampled100[i, 1], 2], sampled100[, 1])
idx <- which(sampled100[,1] %in% mp)
label[idx[idx > i]] <- count
count <- count + 1
}else{
i <- i + 1
}
}
label
truth <- cbind(sampled100, label)
head(truth, 10)
write.csv(sampled100, file = file.path(data.dir, "labeled100.csv"))
data.dir <- "C://Users//xinmi//GCMER//" #XC
sampled100 <- read.csv(file.path(data.dir, "labeled100.csv"))
labeled100.csv
data.dir <- "C://Users//xinmi//GCMER//" #XC
sampled100 <- read.csv(file.path(data.dir, "labeled100.csv"))
head(sampled100)
truth
label
head(truth, 10)
write.csv(truth, file = file.path(data.dir, "labeled100.csv"))
data.dir <- "C://Users//xinmi//GCMER//" #XC
sampled100 <- read.csv(file.path(data.dir, "labeled100.csv"))
head(sampled100)
block <- as.vector(sampled100$label)
block
length(unique(block))
names(sampled100)
sampled100 <- sampled100[, -c(1,2)]
sampled100[is.na(sampled100)] <- ""
names(sampled100)
data.dir <- "C://Users//xinmi//GCMER//" #XC
sampled100 <- read.csv(file.path(data.dir, "labeled100.csv"))
head(sampled100)
block <- as.vector(sampled100$label)
names(sampled100)
sampled100 <- sampled100[, -c(1,2, ncol(sampled100))]
names(sampled100)
sampled100[is.na(sampled100)] <- ""
sim.sampled.aff <- vector("list", (ncol(sampled100)))
for(i in 1:ncol(sampled100)){
sim.sampled.aff[[i]] <- stringsimmatrix(sampled100[, i], method = "lv")
}
source("C:/Users/xinmi/GCMER/R/learn.metric.R")
learn.metric(sim.sampled.aff[[1]], block)
length(sim.sampled.aff)
learn.metric(sim.sampled.aff, block)
# Output:
# weights w
# matrix D' such that objective = || D' w ||^2
sim.vec <- unlist(sim.sampled.aff)
names(sampled100)
n <- nrow(sampled100)
n
p <- ncol(sampled100)
p
sim.array <- array(sim.vec, dim = c(n, n, p))
learn.metric(sim.array, block)
opt.metric <- learn.metric(sim.array, block)
opt.metric$w
which.max(opt.metric$w)
sort(opt.metric$w, decreasing = TRUE)
order(opt.metric$w, decreasing = TRUE)
# The 5th column is choosen
names(sampled100)
# The 5th column is choosen
names(sampled100)[5]
# The 5th column is choosen
names(sampled100)[5]
sampled100[,5]
# How about the sencond largest 3rd column?
names(sampled100)[3] #
sampled100[,3]
#By my guess before metric learning, I guess the important feature could be "Name1"
names(sampled100)[1]
opt.metric$w[1]
order(abs(opt.metric$w), decreasing = TRUE) #5 3 9 6 7 2 1 4 8
o <- order(opt.metric$w, decreasing = TRUE) #5 3 9 6 7 2 1 4 8
names(sampled100)[o]
# absolute value
o <- order(abs(opt.metric$w), decreasing = TRUE) #5 8 4 1 3 9 6 7 2
names(sampled100)[o]
rm(list = ls())
library(stringdist)
require(quadprog)
data.dir <- "C://Users//xinmi//GCMER//Affiliation//" #XC
aff <- read.csv(file.path(data.dir, "clean_affiliations_final.csv"))
#source("C:/Users/xinmi/GCMER/R/distance.calc.R")
source("C:/Users/xinmi/GCMER/R/learn.metric.R")
# manually label the sampled 100 rows
data.dir <- "C://Users//xinmi//GCMER//Affiliation//" #XC
mapping.aff <- read.csv(file.path(data.dir, "affiliationstrings_mapping.csv"))
# Label the whole affiliation dataset
label <- integer(nrow(aff))
count <- 1
for(i in 1:nrow(aff)){
if(label[i] == 0){
label[i] <- count
mp <- intersect(mapping.aff[mapping.aff[, 1] == aff[i, 1], 2], aff[, 1])
idx <- which(aff[,1] %in% mp)
label[idx[idx > i]] <- count
count <- count + 1
}else{
i <- i + 1
}
}
length(label)
length(unique(label))
# wrap up
samplesize <- 100
data <- aff
method <- "lv"
iters <- 100
w <- matrix(, ncol = 2, nrow = iters)
iter <- 1
idx <- sample(nrow(data), samplesize)
#block <- as.vector(data$label)
## Metric learning
samples <- data[idx, -c(1,2)]
n <- samplesize
p <- ncol(samples)
samples[is.na(samples)] <- ""
sim.list <- vector("list", p)
for(i in 1:p){
sim.list[[i]] <- stringsimmatrix(samples[, i], method = method)
}
sim.list
iter.learn.metric <- function(samplesize, data, label, method = "lv", iters = 500){
w <- matrix(, ncol = 2, nrow = iters)
for(iter in 1: iters){
idx <- sample(nrow(data), samplesize)
#block <- as.vector(data$label)
## Metric learning
samples <- data[idx, -c(1,2)]
n <- samplesize
p <- ncol(samples)
samples[is.na(samples)] <- ""
sim.list <- vector("list", p)
for(i in 1:p){
sim.list[[i]] <- stringsimmatrix(samples[, i], method = method)
}
block <- label[idx]
sim.vec <- unlist(sim.list)
sim.array <- array(sim.vec, dim = c(n, n, p))
opt.metric <- learn.metric(sim.array, block)
opt.metric2 <- learn.metric2(sim.array, block)
w[iter,1] <- which.max(opt.metric$w)
w[iter,2] <- which.max(opt.metric2$w)
}
return(w)
}
test <- iter.learn.metric(samplesize = 100, data = aff)
test <- iter.learn.metric(samplesize = 100, data = aff, label = label)
iter.learn.metric <- function(samplesize, data, label, method = "lv", iters = 500){
w <- matrix(, ncol = 2, nrow = iters)
for(iter in 1: iters){
idx <- sample(nrow(data), samplesize)
#block <- as.vector(data$label)
## Metric learning
samples <- data[idx, -c(1,2)]
n <- samplesize
p <- ncol(samples)
samples[is.na(samples)] <- ""
sim.list <- vector("list", p)
for(i in 1:p){
sim.list[[i]] <- stringsimmatrix(samples[, i], method = method)
}
block <- label[idx]
sim.vec <- unlist(sim.list)
sim.array <- array(sim.vec, dim = c(n, n, p))
opt.metric <- learn.metric(sim.array, block)
opt.metric2 <- learn.metric2(sim.array, block)
w[iter,1] <- which.max(opt.metric$w)
w[iter,2] <- which.max(opt.metric2$w)
}
return(w)
}
data.dir <- "C://Users//xinmi//GCMER//Affiliation//" #XC
aff <- read.csv(file.path(data.dir, "clean_affiliations_final.csv"))
aff[1:30,]
#source("C:/Users/xinmi/GCMER/R/distance.calc.R")
source("C:/Users/xinmi/GCMER/R/learn.metric.R")
# manually label the sampled 100 rows
data.dir <- "C://Users//xinmi//GCMER//Affiliation//" #XC
mapping.aff <- read.csv(file.path(data.dir, "affiliationstrings_mapping.csv"))
# Label the whole affiliation dataset
label <- integer(nrow(aff))
count <- 1
for(i in 1:nrow(aff)){
if(label[i] == 0){
label[i] <- count
mp <- intersect(mapping.aff[mapping.aff[, 1] == aff[i, 1], 2], aff[, 1])
idx <- which(aff[,1] %in% mp)
label[idx[idx > i]] <- count
count <- count + 1
}else{
i <- i + 1
}
}
length(label)
length(unique(label))
label
stringsimmatrix(" ", "abc")
data(cora)
names(cora)
library(cora)
library(stringdist)
data(cora)
n <- nrow(cora)
names(cora)
cora[1:5,]
# 10Kfull synthetic dataset
data.dir <- "D://Github//Data-Analytics-Lab-Prof.Degras//EntityResolution//DataResource//10Kfull.RData" #XC
load(data.dir)
ls() # display the data name "D10K"
n <- length(D10K) #10000
# Truth
data.dir <- "D://Github//Data-Analytics-Lab-Prof.Degras//EntityResolution//DataResource//" #XC
d10kdup <- read.csv(paste0(data.dir, "10Kduplicates.csv"))
d10kdup.mat <- matrix(, ncol = 2, nrow = nrow(d10kdup))
d10kdup.mat[,1] <- sapply(strsplit(d10kdup[1:nrow(d10kdup),], "|", fixed = TRUE), "[[", 1)
d10kdup.mat[,2] <- sapply(strsplit(d10kdup[1:nrow(d10kdup),], "|", fixed = TRUE), "[[", 2)
nrow(d10kdup) #8705 matches
# look at the true match
D10K[as.integer(d10kdup.mat[1,])]
D10K[as.integer(d10kdup.mat[100,])]
