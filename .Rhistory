!g1
g1 & !g1
g1 | !g1
g1
t(g1)
g1 == t(g1)
## Convert graph to adjacency list in view of graph coloring
g1[!g1 == t(g1)]
g1
## Convert graph to adjacency list in view of graph coloring
g1[!g1 == t(g1)] <- 1
g1
sim.tab2adj <- function(sim.tab, threshold){
g0 <- as.matrix(sim.tab)
n.nodes <- max(g0[,1:2])
g1 <- matrix(0, ncol = n.nodes, nrow = n.nodes)
for(i in 1:nrow(g0)){
g1[g0[i,1], g0[i,2]] <- g0[i,3]
}
if (!all(g1 %in% c(0, 1))) g1 <- (g1 >= threshold)
## Convert graph to adjacency list in view of graph coloring
g1[!g1 == t(g1)] <- 1
}
system.time(
#test <- adjmat2list(adj_matrix);
#test2 <- adjlist2mat(test)
test3 <- sim.tab2adj(edge_table)
)
test3
edge_table
edge_table <- data.frame(
From = c(1, 2, 2, 3, 4),
To = c(2, 1, 3, 4, 3),
Weight = c(1, 1, 1, 1, 1)
)
sim.tab2adj <- function(sim.tab, threshold){
g0 <- as.matrix(sim.tab)
n.nodes <- max(g0[,1:2])
g1 <- matrix(0, ncol = n.nodes, nrow = n.nodes)
for(i in 1:nrow(g0)){
g1[g0[i,1], g0[i,2]] <- g0[i,3]
}
if (!all(g1 %in% c(0, 1))) g1 <- (g1 >= threshold)
## Convert graph to adjacency list in view of graph coloring
g1[g1!=t(g1)] <- 1
return(g1)
}
system.time(
#test <- adjmat2list(adj_matrix);
#test2 <- adjlist2mat(test)
test3 <- sim.tab2adj(edge_table)
)
test3
which(test3 == 1, arr.ind = TRUE)
#name: threeCol2list
#weighted / unweighted
neighbors <- function(simtab, threshold){
#first column: start, second column: end, third: similarity
stopifnot(ncol(simtab) == 3)
simtab[simtab[,3] < threshold,] <- NA
simtab <- simtab[!is.na(simtab[,1]),]
n.nodes <- max(simtab[,1:2])
nbor <- vector("list", n.nodes)
for(i in 1: n.nodes){
nbor[[i]] <- sort(unique(c(simtab[simtab[,1]==i, 2], simtab[simtab[,2]==i, 1])))
}
#nbor[sapply(nbor, length) == 0] <- NULL # double check if appropriate
nbor
}
system.time(
#test <- adjmat2list(adj_matrix);
#test2 <- adjlist2mat(test)
#test3 <- simtab2adj(edge_table)
test4 <- neighbors(edge_table)
)
#name: threeCol2list
#weighted / unweighted
neighbors <- function(simtab, threshold=0){
#first column: start, second column: end, third: similarity
stopifnot(ncol(simtab) == 3)
simtab[simtab[,3] < threshold,] <- NA
simtab <- simtab[!is.na(simtab[,1]),]
n.nodes <- max(simtab[,1:2])
nbor <- vector("list", n.nodes)
for(i in 1: n.nodes){
nbor[[i]] <- sort(unique(c(simtab[simtab[,1]==i, 2], simtab[simtab[,2]==i, 1])))
}
#nbor[sapply(nbor, length) == 0] <- NULL # double check if appropriate
nbor
}
system.time(
#test <- adjmat2list(adj_matrix);
#test2 <- adjlist2mat(test)
#test3 <- simtab2adj(edge_table)
test4 <- neighbors(edge_table)
)
test4
edge_table
adj_matrix
adjmat2simtab <- function(mat){
which(mat == 1, arr.ind = TRUE)
}
system.time(
#test <- adjmat2list(adj_matrix);
#test2 <- adjlist2mat(test)
#test3 <- simtab2adj(edge_table)
#test4 <- neighbors(edge_table)
test5 <- adjmat2simtab(adj_matrix)
)
test5
simtab[,1] > simtab[,2]
test5[,1] > test5[,2]
adjmat2simtab <- function(mat){
simtab <- which(mat != 0, arr.ind = TRUE)
simtab[simtab[,1] > simtab[,2],]
}
system.time(
#test <- adjmat2list(adj_matrix);
#test2 <- adjlist2mat(test)
#test3 <- simtab2adj(edge_table)
#test4 <- neighbors(edge_table)
test5 <- adjmat2simtab(adj_matrix)
)
test5
adjmat2simtab <- function(mat){
simtab <- which(mat != 0, arr.ind = TRUE)
out <- simtab[simtab[,1] < simtab[,2],]
out
}
system.time(
#test <- adjmat2list(adj_matrix);
#test2 <- adjlist2mat(test)
#test3 <- simtab2adj(edge_table)
#test4 <- neighbors(edge_table)
test5 <- adjmat2simtab(adj_matrix)
)
test5
adjmat2simtab <- function(mat, threshold=1){
mat[mat<threshold] <- 0
simtab <- which(mat != 0, arr.ind = TRUE)
out <- simtab[simtab[,1] < simtab[,2],]
out
}
simtab2adj <- function(simtab, threshold=1){
g0 <- as.matrix(simtab)
n.nodes <- max(g0[,1:2])
g1 <- matrix(0, ncol = n.nodes, nrow = n.nodes)
for(i in 1:nrow(g0)){
g1[g0[i,1], g0[i,2]] <- g0[i,3]
}
if (!all(g1 %in% c(0, 1))) g1 <- (g1 >= threshold)
## Convert graph to adjacency list in view of graph coloring
g1[g1!=t(g1)] <- 1
return(g1)
}
system.time(
#test <- adjmat2list(adj_matrix);
#test2 <- adjlist2mat(test)
test3 <- simtab2adj(edge_table)
#test4 <- neighbors(edge_table)
#test5 <- adjmat2simtab(adj_matrix)
)
test3
edge_table
edge_table <- data.frame(
From = c(1, 2, 2, 3, 4),
To = c(2, 1, 3, 4, 3),
#Weight = c(1, 1, 1, 1, 1)
Weight = c(1, 0.4, 0.8, 0.3, 1)
)
edge_table
system.time(
#test <- adjmat2list(adj_matrix);
#test2 <- adjlist2mat(test)
test3 <- simtab2adj(edge_table)
#test4 <- neighbors(edge_table)
#test5 <- adjmat2simtab(adj_matrix)
)
test3
edge_table
system.time(
#test <- adjmat2list(adj_matrix);
#test2 <- adjlist2mat(test)
test3 <- simtab2adj(edge_table, 0.5)
#test4 <- neighbors(edge_table)
#test5 <- adjmat2simtab(adj_matrix)
)
test3
test
adj_matrix
adjmat2simtab <- function(mat, threshold=1){
mat[mat<threshold] <- 0
simtab <- which(mat != 0, arr.ind = TRUE)
simtab[,3] <- 1
out <- simtab[simtab[,1] < simtab[,2],]
out
}
system.time(
#test <- adjmat2list(adj_matrix);
#test2 <- adjlist2mat(test)
test3 <- simtab2adj(edge_table, 0.5)
#test4 <- neighbors(edge_table)
#test5 <- adjmat2simtab(adj_matrix)
)
test3
edge_table
test5 <- adjmat2simtab(adj_matrix)
adjmat2simtab <- function(mat, threshold=1){
mat[mat<threshold] <- 0
simtab <- which(mat != 0, arr.ind = TRUE)
simtab[,3] <- rep(1, nrow(simtab))
out <- simtab[simtab[,1] < simtab[,2],]
out
}
test5 <- adjmat2simtab(adj_matrix)
mat = adj_matrix
mat
mat[mat<threshold] <- 0
threshold
simtab <- which(mat != 0, arr.ind = TRUE)
simtab
nrow(simtab)
simtab[, "similarity"] <- rep(1, nrow(simtab))
rep(1, nrow(simtab))
mat[mat<threshold] <- 0
simtab <- which(mat != 0, arr.ind = TRUE)
simtab <- simtab[simtab[,1] < simtab[,2],]
simtab[, "similarity"] <- rep(1, nrow(simtab))
nrow(simtab)
simtab <- data.frame("row", "col", "similarity")
simtab
simtab <- data.frame(names = c("row", "col", "similarity"))
simtab
simtab <- data.frame()
simtab <- data.frame(,ncol = 3)
data.frame()
simtab <- data.frame("row"=integer(), "col"=integer(), "similarity"=double())
simtab
mat[mat<threshold] <- 0
simtab[,1:2] <- which(mat != 0, arr.ind = TRUE)
which(mat != 0, arr.ind = TRUE)
temp <- which(mat != 0, arr.ind = TRUE)
simtab <- data.frame("row"=integer(nrow(temp)), "col"=integer(), "similarity"=double())
simtab
nrow(temp)
simtab <- data.frame("row"=integer(nrow(temp)), "col"=integer(nrow(temp)), "similarity"=double(nrow(temp)))
simtab
simtab[,1:2] <- temp
simtab
simtab <- simtab[simtab[,1] < simtab[,2],]
simtab[, 3] <- rep(1, nrow(simtab))
simtab
adj_matrix <- make.adj.mat(8, "random")
test <- adjmat2list(adj_matrix);
make.adj.mat <- function(n, weight = c("none", "random")){
adj.mat <- matrix(0, n, n) # create an adjacency matrix
idx <- sample(1:(n^2), 2 * n) # randomly create edges
if(weight == "random"){
weight <- runif(2*n)
adj.mat[idx] <- weight
}else{
adj.mat[idx] <- 1
}
diag(adj.mat) <- 0
adj.mat <- adj.mat + t(adj.mat) # make sure it's symmetric
adj.mat[adj.mat > 1] <- 1
return(adj.mat)
}
adj_matrix <- make.adj.mat(8, "random")
adj_matrix
test1 <- adjmat2list(adj_matrix);
test1
adjmat2list <- function(mat)
{
stopifnot(is.matrix(mat))
stopifnot(identical(rownames(mat), colnames(mat)))
stopifnot(is.numeric(mat[1]) || is.logical(mat[1]))
stopifnot(nrow(mat) == ncol(mat))
stopifnot(all(mat == t(mat)))
if (is.numeric(mat[1])) {
stopifnot(all(mat %in% c(0, 1)))
#stopifnot(all(diag(mat) == 0))
if(!all(diag(mat) == 0)){
diag(mat) == 0
}
out <- apply(mat == 1, 2, which)
} else {
stopifnot(all(!diag(mat)))
out <- apply(mat, 2, which)
}
names(out) <- rownames(mat)
out
}
adjlist2mat <- function(ll)
{
stopifnot(is.list(ll))
ll <- lapply(ll, as.integer)
stopifnot(all(unlist(ll) >= 1 & unlist(ll) <= length(ll)))
n <- length(ll)
out <- matrix(0L, n, n)
nnb <- sapply(ll, length)
out[cbind(rep(1:n, nnb), unlist(ll))] <- 1L
if (any(diag(out) == 1L))
stop("Invalid adjacency list: please remove any vertex from the list of its neighbors.")
if (!all(out == t(out)))
stop("Invalid adjacency list: please make sure that the",
"adjacency relationship is symmetric (if vertex A is",
"adjacent to vertex B, then vertex B must be adjacent",
"to vertex A).")
out
}
simtab2adjmat <- function(simtab, threshold=1){
g0 <- as.matrix(simtab)
n.nodes <- max(g0[,1:2])
g1 <- matrix(0, ncol = n.nodes, nrow = n.nodes)
for(i in 1:nrow(g0)){
g1[g0[i,1], g0[i,2]] <- g0[i,3]
}
if (!all(g1 %in% c(0, 1))) g1 <- (g1 >= threshold)
## Convert graph to adjacency list in view of graph coloring
g1[g1!=t(g1)] <- 1
return(g1)
}
adjmat2simtab <- function(mat, threshold=1){
mat[mat<threshold] <- 0
temp <- which(mat != 0, arr.ind = TRUE)
simtab <- data.frame("From"=integer(nrow(temp)),
"To"=integer(nrow(temp)),
"Weight"=double(nrow(temp)))
simtab[,1:2] <- temp
simtab <- simtab[simtab[,1] < simtab[,2],]
simtab[, 3] <- rep(1, nrow(simtab))
return(simtab)
}
#weighted / unweighted
neighbors <- function(simtab, threshold=0){
#first column: start, second column: end, third: similarity
stopifnot(ncol(simtab) == 3)
simtab[simtab[,3] < threshold,] <- NA
simtab <- simtab[!is.na(simtab[,1]),]
n.nodes <- max(simtab[,1:2])
nbor <- vector("list", n.nodes)
for(i in 1: n.nodes){
nbor[[i]] <- sort(unique(c(simtab[simtab[,1]==i, 2], simtab[simtab[,2]==i, 1])))
}
#nbor[sapply(nbor, length) == 0] <- NULL # double check if appropriate
nbor
}
test1 <- adjmat2list(adj_matrix)
adj_matrix
adjmat2list <- function(mat, threshold = median(mat))
{
stopifnot(is.matrix(mat))
stopifnot(identical(rownames(mat), colnames(mat)))
stopifnot(is.numeric(mat[1]) || is.logical(mat[1]))
stopifnot(nrow(mat) == ncol(mat))
stopifnot(all(mat == t(mat)))
if (is.numeric(mat[1])) {
#stopifnot(all(mat %in% c(0, 1)))
if (!all(g1 %in% c(0, 1))) mat <- (mat >= threshold)
#stopifnot(all(diag(mat) == 0))
if(!all(diag(mat) == 0)){
diag(mat) == 0
}
out <- apply(mat == 1, 2, which)
} else {
stopifnot(all(!diag(mat)))
out <- apply(mat, 2, which)
}
names(out) <- rownames(mat)
out
}
median(adj_matrix)
mean(adj_matrix)
adjmat2list <- function(mat, threshold = mean(mat))
{
stopifnot(is.matrix(mat))
stopifnot(identical(rownames(mat), colnames(mat)))
stopifnot(is.numeric(mat[1]) || is.logical(mat[1]))
stopifnot(nrow(mat) == ncol(mat))
stopifnot(all(mat == t(mat)))
if (is.numeric(mat[1])) {
#stopifnot(all(mat %in% c(0, 1)))
if (!all(g1 %in% c(0, 1))) mat <- (mat >= threshold)
#stopifnot(all(diag(mat) == 0))
if(!all(diag(mat) == 0)){
diag(mat) == 0
}
out <- apply(mat == 1, 2, which)
} else {
stopifnot(all(!diag(mat)))
out <- apply(mat, 2, which)
}
names(out) <- rownames(mat)
out
}
test1 <- adjmat2list(adj_matrix)
adjmat2list <- function(mat, threshold = mean(mat))
{
stopifnot(is.matrix(mat))
stopifnot(identical(rownames(mat), colnames(mat)))
stopifnot(is.numeric(mat[1]) || is.logical(mat[1]))
stopifnot(nrow(mat) == ncol(mat))
stopifnot(all(mat == t(mat)))
if (is.numeric(mat[1])) {
#stopifnot(all(mat %in% c(0, 1)))
if (!all(mat %in% c(0, 1))) mat <- (mat >= threshold)
#stopifnot(all(diag(mat) == 0))
if(!all(diag(mat) == 0)){
diag(mat) == 0
}
out <- apply(mat == 1, 2, which)
} else {
stopifnot(all(!diag(mat)))
out <- apply(mat, 2, which)
}
names(out) <- rownames(mat)
out
}
test1 <- adjmat2list(adj_matrix)
test1
adj_matrix
adjlist2mat <- function(ll)
{
stopifnot(is.list(ll))
ll <- lapply(ll, as.integer)
stopifnot(all(unlist(ll) >= 1 & unlist(ll) <= length(ll)))
n <- length(ll)
out <- matrix(0L, n, n)
nnb <- sapply(ll, length)
out[cbind(rep(1:n, nnb), unlist(ll))] <- 1L
if (any(diag(out) == 1L))
stop("Invalid adjacency list: please remove any vertex from the list of its neighbors.")
if (!all(out == t(out)))
stop("Invalid adjacency list: please make sure that the",
"adjacency relationship is symmetric (if vertex A is",
"adjacent to vertex B, then vertex B must be adjacent",
"to vertex A).")
out
}
simtab2adjmat <- function(simtab, threshold=1){
g0 <- as.matrix(simtab)
n.nodes <- max(g0[,1:2])
g1 <- matrix(0, ncol = n.nodes, nrow = n.nodes)
for(i in 1:nrow(g0)){
g1[g0[i,1], g0[i,2]] <- g0[i,3]
}
if (!all(g1 %in% c(0, 1))) g1 <- (g1 >= threshold)
## Convert graph to adjacency list in view of graph coloring
g1[g1!=t(g1)] <- 1
return(g1)
}
adjmat2simtab <- function(mat, threshold=1){
mat[mat<threshold] <- 0
temp <- which(mat != 0, arr.ind = TRUE)
simtab <- data.frame("From"=integer(nrow(temp)),
"To"=integer(nrow(temp)),
"Weight"=double(nrow(temp)))
simtab[,1:2] <- temp
simtab <- simtab[simtab[,1] < simtab[,2],]
simtab[, 3] <- rep(1, nrow(simtab))
return(simtab)
}
test1 <- adjmat2list(adj_matrix)
test2 <- adjlist2mat(test1)
test3 <- simtab2adjmat(edge_table, 0.5)
edge_table <- data.frame(
From = c(1, 2, 2, 3, 4),
To = c(2, 1, 3, 4, 3),
#Weight = c(1, 1, 1, 1, 1)
Weight = c(1, 0.4, 0.8, 0.3, 1)
)
test3 <- simtab2adjmat(edge_table, 0.5)
test4 <- adjmat2simtab(adj_matrix)
test5 <- simtab2adjlist(simtab, threshold)
simtab2adjlist <- function(simtab, threshold=0){
#first column: start, second column: end, third: similarity
stopifnot(ncol(simtab) == 3)
simtab[simtab[,3] < threshold,] <- NA
simtab <- simtab[!is.na(simtab[,1]),]
n.nodes <- max(simtab[,1:2])
nbor <- vector("list", n.nodes)
for(i in 1: n.nodes){
nbor[[i]] <- sort(unique(c(simtab[simtab[,1]==i, 2], simtab[simtab[,2]==i, 1])))
}
#nbor[sapply(nbor, length) == 0] <- NULL # double check if appropriate
nbor
}
test5 <- simtab2adjlist(simtab, threshold)
test5 <- simtab2adjlist(test4, threshold)
test5 <- simtab2adjlist(test4)
test1
test2
test3
test4
adj_matrix
test5
adjmat2simtab <- function(mat, threshold = 0){
mat[mat<threshold] <- 0
temp <- which(mat != 0, arr.ind = TRUE)
simtab <- data.frame("From"=integer(nrow(temp)),
"To"=integer(nrow(temp)),
"Weight"=double(nrow(temp)))
simtab[,1:2] <- temp
simtab <- simtab[simtab[,1] < simtab[,2],]
simtab[, 3] <- rep(1, nrow(simtab))
return(simtab)
}
test4 <- adjmat2simtab(adj_matrix)
test4
test5 <- simtab2adjlist(test4)
test5
